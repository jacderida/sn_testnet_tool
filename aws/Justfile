#!/usr/bin/env just --justfile
set dotenv-load := true

init name:
  #!/usr/bin/env bash
  set -e
  (
    cd terraform
    echo "Creating new Terraform workspace for the testnet..."
    terraform workspace new {{name}}
  )
  cp ansible/inventory/dev_genesis_inventory_aws_ec2.yml \
    ansible/inventory/.{{name}}_genesis_inventory_aws_ec2.yml
  sed "s/dev/{{name}}/g" -i ansible/inventory/.{{name}}_genesis_inventory_aws_ec2.yml
  cp ansible/inventory/dev_node_inventory_aws_ec2.yml \
    ansible/inventory/.{{name}}_node_inventory_aws_ec2.yml
  sed "s/dev/{{name}}/g" -i ansible/inventory/.{{name}}_node_inventory_aws_ec2.yml
  pub_key=$(cat $SSH_PUBLIC_KEY_PATH | base64 -w0 | xargs)
  echo "Creating new key pair for the testnet..."
  aws ec2 import-key-pair \
    --key-name testnet-{{name}} --public-key-material $pub_key

testnet name node_count:
  #!/usr/bin/env bash
  set -e
  (
    # Create the EC2 instances
    cd terraform
    terraform init
    terraform workspace select {{name}}
    terraform apply -auto-approve \
      -var node_count={{node_count}} \
      -var key_pair_name=testnet-{{name}} \
      -var vpc_subnet_id="$SN_TESTNET_DEV_SUBNET_ID" \
      -var vpc_security_group_id="$SN_TESTNET_DEV_SECURITY_GROUP_ID"
  )
  (
    # Provision the genesis node
    cd ansible
    ansible-playbook --inventory inventory/.{{name}}_genesis_inventory_aws_ec2.yml \
      --private-key $SSH_PRIVATE_KEY_PATH \
      --user ubuntu \
      --extra-vars is_genesis=true \
      --vault-password-file $ANSIBLE_VAULT_PASSWORD_PATH \
      genesis_node.yml
  )
  (
    # Obtain the network contacts file from the genesis node
    cd ansible
    ansible-playbook --inventory inventory/.{{name}}_genesis_inventory_aws_ec2.yml \
      --private-key $SSH_PRIVATE_KEY_PATH \
      --user ubuntu \
      network_contacts.yml
  )
  (
    # Provision the nodes
    cd ansible
    ansible-playbook --inventory inventory/.{{name}}_node_inventory_aws_ec2.yml \
      --private-key $SSH_PRIVATE_KEY_PATH \
      --user ubuntu \
      --extra-vars is_genesis=true \
      --vault-password-file $ANSIBLE_VAULT_PASSWORD_PATH \
      nodes.yml
  )

clean name:
  #!/usr/bin/env bash
  set -e
  (
    cd terraform
    terraform destroy -auto-approve \
      -var key_pair_name=testnet-{{name}} \
      -var vpc_subnet_id="$SN_TESTNET_DEV_SUBNET_ID" \
      -var vpc_security_group_id="$SN_TESTNET_DEV_SECURITY_GROUP_ID"
  )
  (
    cd terraform
    terraform workspace select dev
    output=$(terraform workspace list)
    if [[ "$output" == *"{{name}}"* ]]; then
        echo "Deleting {{name}} workspace..."
        terraform workspace delete -force {{name}}
    fi
  )
  output=$(aws ec2 describe-key-pairs | jq -r '.KeyPairs[].KeyName')
  if [[ "$output" == *"testnet-{{name}}"* ]]; then
    echo -n "Deleting keypair..."
    aws ec2 delete-key-pair --key-name testnet-{{name}}
    echo "Done"
  fi
  rm -f ansible/inventory/.{{name}}_genesis_inventory_aws_ec2.yml
  rm -f ansible/inventory/.{{name}}_node_inventory_aws_ec2.yml
