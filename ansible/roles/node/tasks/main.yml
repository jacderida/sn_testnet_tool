---
- name: store secret in a variable
  set_fact:
    aws_secret_key: "{{ lookup('file', 'files/ec2_read_only_secret_access_key') }}"

# This IP points to the EC2 metadata service that is running on the EC2 instance. For some reason though the service doesn't make the tags available.
- name: get current instance id
  shell: wget -q -O - http://169.254.169.254/latest/meta-data/instance-id
  register: instance_id_cmd
  when: provider == "aws"

- name: get ec2 instance facts
  ec2_instance_info:
    region: eu-west-2
    aws_access_key: AKIAVVODCRMSHXHMIPV2
    aws_secret_key: "{{ aws_secret_key }}"
    instance_ids:
      - "{{ instance_id_cmd.stdout }}"
  register: instance_facts
  when: provider == "aws"

# The `instance_name` is then used in the service definition file.
- name: get the name tag value
  set_fact:
    instance_name: "{{ instance_facts.instances[0].tags['Name'] }}"
  when: provider == "aws"

# The `instance_private_ip` is also used in the service definition file.
- name: get the private IP for the instance
  set_fact:
    node_rpc_ip: "{{ instance_facts.instances[0].network_interfaces[0].private_ip_address }}"
  when: provider == "aws"

- name: get hostname
  command: hostname
  register: host_output
  when: provider == "digital-ocean"

# The `instance_name` is then used in the service definition file.
- name: use the hostname as the instance name
  set_fact:
    instance_name: "{{ host_output.stdout }}"
  when: provider == "digital-ocean"

# The `node_rpc_ip` is also used in the service definition file.
- name: use the public IP as the RPC address on DO
  set_fact:
    node_rpc_ip: "{{ ansible_host }}"
  when: provider == "digital-ocean"

- name: get the latest version or a custom build of the node
  ansible.builtin.get_url:
    url: "{{ node_archive_url }}"
    dest: /tmp/{{ node_archive_filename }}

- name: extract the node binary to /usr/local/bin
  become: True
  ansible.builtin.unarchive:
    src: "/tmp/{{ node_archive_filename }}"
    dest: "{{ node_archive_dest_path }}"
    remote_src: True

- name: copy service file
  become: True
  template:
    src: sn_node.service.j2
    dest: /etc/systemd/system/safenode@.service
  register: service_template_created

- name: reload the system manager configuration
  become: True
  command: systemctl daemon-reload
  when: service_template_created.changed

- name: start the node services
  become: True
  systemd:
    name: safenode@{{ item }}
    state: started
  loop: "{{ range(1, (node_instance_count | int) + 1)|list }}"
  when: not is_genesis

- name: start the genesis node service
  become: True
  systemd:
    name: safenode@1
    state: started
    enabled: yes
  when: is_genesis
